{"version":3,"file":"VrxGrid.stories-4fcf77a1.js","sources":["../../src/components/VrxGrid/Models/Header.ts","../../src/components/VrxGrid/VrxGridHeaderCell.vue","../../src/components/VrxGrid/gridStyles.ts","../../src/components/VrxGrid/Models/Row.ts","../../src/components/VrxGrid/VrxGridRow.vue","../../src/components/VrxGrid/Models/Grid.ts","../../src/components/VrxGrid/VrxGrid.vue"],"sourcesContent":["import {GridConfiguration, GridFilter, GridHeader, GridRow} from \"@/components/VrxGrid/GridConfiguration.ts\";\nimport {SelectItemInterface} from \"@/components/VrxSelect/SelectItemInterface.ts\";\n\nexport class Header {\n    private readonly _id: string;\n    private readonly _text: string;\n    private _type: \"text\" | \"component\" | undefined;\n    private readonly _align?: \"left\" | \"center\" | \"right\";\n    private readonly _sortable?: boolean;\n    private readonly _sortFunction?: ((a : GridRow, b : GridRow) => number) | undefined;\n    private _sortDirection?: \"asc\" | \"desc\" | undefined;\n    private readonly _width?: number;\n    private readonly _filterType?: \"text\" | \"select\" | \"date\";\n    private readonly _filterPlaceholder?: string;\n    private _customFilter?: Function;\n    private _headerConfig?: GridHeader;\n\n    constructor (header: GridHeader) {\n        this._id = header.id;\n        this._text = header.text;\n        this._type = header.type;\n        this._align = header.align;\n        this._sortable = header.sortable;\n        this._sortFunction = header.sortFunction;\n        this._sortDirection = header.sortDirection;\n        this._width = header.width;\n        this._filterType = header.filterType;\n        this._filterPlaceholder = header.filterPlaceholder;\n        this._customFilter = header.customFilter;\n        this._headerConfig = header;\n    }\n\n    public get id(): string {\n        return this._id;\n    }\n\n    public get text(): string {\n        return this._text;\n    }\n\n    public get filterType(): \"text\" | \"select\" | \"date\" | null {\n        return this._filterType ?? null;\n    }\n\n    public get filterPlaceholder(): string | null {\n        return this._filterPlaceholder ?? null;\n    }\n\n    public get sortable(): boolean {\n        return this._sortable ?? false;\n    }\n\n    public get sortDirection(): \"asc\" | \"desc\" | null {\n        return this._sortDirection ?? null;\n    }\n\n    public get textAlignmentClass(): string | null {\n        switch (this._align) {\n            case \"left\":\n                return \"text-left\";\n            case \"center\":\n                return \"text-center\";\n            case \"right\":\n                return \"text-right\";\n            default:\n                return null;\n        }\n    }\n\n    public get width(): number | undefined {\n        return this._width;\n    }\n\n    public sortClicked (gridConfig : GridConfiguration): void {\n        if(!this._sortable) return;\n        this._sortDirection = this._sortDirection === \"asc\" ? \"desc\" : \"asc\";\n        this._headerConfig!.sortDirection = this._sortDirection;\n\n        this._resetSortDirection(gridConfig, [this._id]);\n        this._sortFunction ? this._useCustomSorting(gridConfig) : this._useDefaultSorting(gridConfig);\n    }\n\n    private _useDefaultSorting (gridConfig : GridConfiguration) : void {\n        gridConfig.data.sort((a : GridRow, b : GridRow) => {\n            if(a.data[this._id] < b.data[this._id]) return this._sortDirection === 'asc' ? 1 :  -1;\n            if(a.data[this._id] > b.data[this._id]) return this._sortDirection === 'asc' ? -1 :  1;\n            return 0;\n        });\n    }\n\n    private _useCustomSorting (gridConfig : GridConfiguration) : void {\n        if(this._sortFunction && gridConfig){\n            gridConfig.data.sort(this._sortFunction);\n        }\n    }\n\n    private _resetSortDirection (gridConfig : GridConfiguration, toExclude : string[] = []) : void {\n        gridConfig.header.forEach((h : GridHeader) => {\n            if(!toExclude.includes(h.id)){\n                h.sortDirection = undefined;\n            }\n        })\n    }\n\n    public  getSelectableItems(gridConfig : GridConfiguration) : SelectItemInterface[] {\n        const data : SelectItemInterface[] = [];\n        gridConfig.data.forEach((d : GridRow) => {\n            if(!data.find((v : any) => v.value === d.data[this._id])){\n                data.push({value: d.data[this._id], label: d.data[this._id]});\n            }\n        });\n        return data.sort((a : SelectItemInterface, b : SelectItemInterface) => a.label.localeCompare(b.label));\n    }\n\n    public filterByValue (filters : GridFilter [], value : string){\n        const exist = filters.find((f) => f.cellId === this._id);\n        if(exist && value === '') filters.splice(filters.indexOf(exist), 1);\n        exist ? exist.value = value : filters.push({ cellId: this._id , value });\n    }\n}","<template>\n    <th\n        scope=\"col\"\n        class=\"px-3 py-3 vrx-th header-th\"\n        :class=\"headerModel.textAlignmentClass\"\n    >\n      <div class=\"vrx-header-cell mb-2\" @click=\"headerModel.sortClicked(props.gridConfig)\">\n        <span class=\"vrx-grid-label\">{{ headerModel.text }}</span>\n        <VrxIcon\n            v-if=\"headerModel.sortable\"\n            :icon=\"headerConfig.sortDirection === 'asc' ? 'chevron-up' : headerConfig.sortDirection === 'desc' ? 'chevron-down' : 'empty'\"\n            size=\"3\"\n        />\n      </div>\n      <VrxInput\n          v-if=\"headerModel.filterType === 'text'\"\n          :model-value=\"inputValue\"\n          :height=\"30\"\n          class=\"header-input\"\n          :placeholder=\"headerModel.filterPlaceholder ?? '...'\"\n          type=\"text\"\n          @input=\"(val : any) => headerModel.filterByValue(filters as GridFilter[], val.target.value)\"\n      />\n      <VrxSelect\n          v-if=\"headerModel.filterType === 'select'\"\n          :list-data=\"headerModel.getSelectableItems(gridConfig)\"\n          :model-value=\"selectValue\"\n          :placeholder=\"headerModel.filterPlaceholder ?? '...'\"\n          class=\"header-input\"\n          :height=\"30\"\n          :on-select=\"(val : any) => headerModel.filterByValue(filters as GridFilter[], val.value)\"\n          :on-clear=\"() => headerModel.filterByValue(filters as GridFilter[], '')\"\n      />\n    </th>\n</template>\n\n\n<script setup lang=\"ts\">\n  import VrxSelect from \"@/components/VrxSelect/VrxSelect.vue\";\n  import VrxInput from \"@/components/VrxInput/VrxInput.vue\";\n  import VrxIcon from \"@/components/VrxIcon/VrxIcon.vue\";\n  import {Header} from \"@/components/VrxGrid/Models/Header.ts\";\n  import {GridConfiguration, GridFilter, GridHeader} from \"@/components/VrxGrid/GridConfiguration.ts\";\n  import {inject, ref} from \"vue\";\n\n  const props = defineProps<{\n    gridConfig: GridConfiguration;\n    headerConfig: GridHeader;\n  }>();\n\n  const filters : any = inject('filters');\n  let inputValue = ref('');\n  let selectValue = ref([]);\n\n  const headerModel = new Header(props.headerConfig);\n\n</script>\n\n<style scoped>\n  .vrx-header-cell{\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    flex-direction: row;\n    gap: 0.2rem;\n    user-select: none;\n  }\n  .header-input {\n    font-weight: normal;\n    width: 100%;\n  }\n  .px-3{\n    padding-left: 0.75rem;\n    padding-right: 0.75rem;\n  }\n  .vrx-th{\n    vertical-align: top;\n  }\n  .vrx-grid-label{\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n  }\n  .header-th{\n    width: v-bind(headerModel.width + 'px') ;\n  }\n</style>\n","export const textStyle = {\n    'left': 'text-left',\n    'right': 'text-right',\n    'center': 'text-center',\n}","import {GridHeader, GridRow} from \"@/components/VrxGrid/GridConfiguration.ts\";\nimport {computed} from \"vue\";\n\nexport class Row {\n    private readonly _id: string;\n    private readonly _textColor: string | undefined;\n    private readonly _backgroundColor: string | undefined;\n    private readonly _data: any;\n    private readonly _filters: {cellId: string, value: string}[];\n    private readonly _selectedRows: Row[];\n    private readonly _selectable: boolean;\n    private readonly _multiselect: boolean;\n    private readonly _headerConfig: GridHeader[];\n\n    constructor(row : GridRow, filters: any, selectedRows: any, selectable: boolean, multiselect: boolean, headerConfig: GridHeader[]) {\n        this._id = row.id;\n        this._textColor = row.textColor;\n        this._backgroundColor = row.backgroundColor;\n        this._data = row.data;\n        this._filters = filters;\n        this._selectedRows = selectedRows;\n        this._selectable = selectable;\n        this._multiselect = multiselect;\n        this._headerConfig = headerConfig;\n    }\n\n    /**\n     * Returns the content of a cell given the header ID\n     * @param id\n     */\n    public getCellContent (id: string) : any {\n        return this._data[id];\n    }\n\n    /**\n     * Returns the text color of the row\n     */\n    public get textColor () : string | undefined {\n        return this._textColor;\n    }\n\n    /**\n     * Returns the background color of the row\n     */\n    public get backgroundColor () : string | undefined {\n        return this._backgroundColor;\n    }\n\n    /**\n     * Returns the ID of the row\n     */\n    public get id () : string {\n        return this._id;\n    }\n\n    /**\n     * Returns the data of the row\n     */\n    public get data () : any {\n        return this._data;\n    }\n\n    /**\n     * Returns if the row is selectable\n     */\n    public get selectable () : boolean {\n        return this._selectable;\n    }\n\n    /**\n     * Action to be executed when the row is clicked\n     */\n    public rowClicked () : void {\n        const included = this._selectedRows.find(rowIn => rowIn.id === this._id);\n        if(!this._multiselect){\n            if(included){\n                const index = this._selectedRows.indexOf(included);\n                this._selectedRows.splice(index, 1);\n                return;\n            }\n            this._selectedRows.splice(0, this._selectedRows.length);\n            this._selectedRows.push(this);\n            return;\n        }\n\n        if(!included)\n            this._selectedRows.push(this);\n        else {\n            const index = this._selectedRows.indexOf(included);\n            this._selectedRows.splice(index, 1);\n        }\n    }\n\n    /**\n     * Returns if the row is filtered and must be hidden\n     */\n    public isFiltered (){\n        let isFiltered : boolean = false;\n        this._filters.forEach(filter => {\n            const customFilter = this._headerConfig.find(cell => cell.id === filter.cellId)?.customFilter;\n            !isFiltered ? isFiltered = customFilter ? customFilter(this, filter) : this._defaultFilter(filter) : null;\n        });\n        return isFiltered;\n    }\n\n    /**\n     * Returns if the row is in the selected ones\n     */\n    public isSelected () : boolean {\n        const included = this._selectedRows.find(rowIn => rowIn.id === this._id);\n        return !!included;\n    }\n\n    /**\n     * Default filter function\n     * @param filter\n     * @private\n     */\n    private _defaultFilter(filter : {cellId: string, value: string}) : boolean {\n        const value = this._data[filter.cellId].toString();\n        return (!value.includes(filter.value));\n    }\n}","\n<template>\n  <tr\n      :data-testid=\"'vrx-grid-row-'+ rowModel.id\"\n      class=\"bg-white border-b dark:bg-gray-800 dark:border-gray-700 vrx-row\"\n      :class=\"rowStyle\"\n      v-if=\"!isFiltered\"\n      @click=\"rowModel.rowClicked()\"\n  >\n    <td\n        v-for=\"cell in headerConfig\"\n        class=\"px-3 py-4 font-medium whitespace-nowrap vrx-cell\"\n        :class=\"cell.align ? textStyle[cell.align] : null\"\n    >\n      <span class=\"vrx-grid-cell-content\" v-if=\"!cell.type || cell.type === 'text'\">\n        {{ rowModel.getCellContent(cell.id) }}\n      </span>\n      <component v-else :is=\"row.data[cell.id]\"/>\n    </td>\n  </tr>\n</template>\n\n<script setup lang=\"ts\">\n  import colors from \"tailwindcss/colors\";\n  import {textStyle} from \"@/components/VrxGrid/gridStyles.ts\";\n  import {GridHeader, GridRow} from \"@/components/VrxGrid/GridConfiguration.ts\";\n  import {computed, inject} from \"vue\";\n  import {Row} from \"@/components/VrxGrid/Models/Row.ts\";\n  const props = defineProps<{\n    row: GridRow;\n    headerConfig: GridHeader [];\n    selectable?: boolean;\n    multiselect?: boolean;\n  }>();\n\n  const filters = inject('filters');\n  const selectedRows = inject('selectedRows');\n\n  const rowModel = new Row(props.row, filters, selectedRows, props.selectable ?? false, props.multiselect ?? false, props.headerConfig);\n\n  const isFiltered = computed(() => {\n    return rowModel.isFiltered();\n  });\n\n  const rowStyle = computed(() => {\n    if(rowModel.selectable){\n      return rowModel.isSelected() ? 'selected row-hover dark:selected dark:row-hover dark:bg-gray-100' : 'not-selected dark:row-hover row-hover dark:bg-gray-100';\n    }\n    return 'not-selected';\n  });\n\n</script>\n<style scoped>\n  .selected{\n    border-left: 3px solid v-bind(colors.blue[500]);\n    box-sizing: border-box;\n    background-color: v-bind(colors.gray[100]);\n  }\n\n  .vrx-row {\n    user-select: none;\n  }\n\n  .vrx-grid-cell-content{\n    color: v-bind(rowModel.textColor);\n  }\n\n  .vrx-cell{\n    background-color: v-bind(rowModel.backgroundColor);\n  }\n\n  .row-hover:hover{\n    background-color: v-bind(colors.gray[200]);\n    cursor: pointer;\n  }\n\n  .not-selected{\n    border-left: 3px solid transparent;\n    box-sizing: border-box;\n  }\n\n  :is([data-mode=\"dark\"] .dark\\:row-hover:hover) {\n    background-color: v-bind(colors.gray[700]);\n  }\n\n  :is([data-mode=\"dark\"] .dark\\:selected) {\n    background-color:  v-bind(colors.gray[600]);\n    color: white;\n    border-left: 3px solid v-bind(colors.blue[500]);\n    box-sizing: border-box;\n  }\n</style>","import {GridConfiguration, GridFilter, GridHeader, GridRow} from \"@/components/VrxGrid/GridConfiguration.ts\";\nimport {reactive} from \"vue\";\n\nexport class Grid {\n    private readonly _configuration: GridConfiguration;\n    private _filters: GridFilter[];\n    private _selectedRows: GridRow[];\n\n    constructor(grid: GridConfiguration) {\n        this._configuration = grid;\n        this._filters = reactive([]);\n        this._selectedRows = reactive([]);\n    }\n\n    public get configuration(): GridConfiguration {\n        return this._configuration;\n    }\n\n    public get filters(): GridFilter[] {\n        return this._filters;\n    }\n\n    public get data(): GridRow[] {\n        return this._configuration.data;\n    }\n\n    public get selectedRows(): GridRow[] {\n        return this._selectedRows;\n    }\n\n    public set filters(value: GridFilter[]) {\n        this.deselectAll();\n        this._filters = value;\n    }\n\n    public set selectedRows(value: GridRow[]) {\n        this._selectedRows = value;\n    }\n\n    public selectAll() : void {\n        if(this._configuration.multiselect === false){\n            console.warn(`Multiselection in grid \"${this._configuration.id}\" is disabled. No rows will be selected`);\n            return;\n        }\n        this.deselectAll();\n        this._configuration.data.forEach((row : GridRow) => {\n            this._selectedRows.push(row);\n        });\n    }\n\n    public deselectAll() : void {\n        this._selectedRows.splice(0, this._selectedRows.length);\n    }\n\n    public resetFilters() : void {\n        this._filters.splice(0, this._filters.length);\n    }\n\n    public clearData() : void {\n        this.deselectAll();\n        this.resetFilters();\n        this._configuration.data.splice(0, this._configuration.data.length);\n    }\n\n    public updateData(data :  (any & {id:number|string})[]) : void {\n        data.forEach((row : (any & {id:number|string})) => {\n            const exist = this._configuration.data.find((r : (any & {id:number|string})) => r.id === row.id);\n            if(exist){\n                const index = this._configuration.data.indexOf(exist);\n                this._configuration.data.splice(index, 1);\n                this._configuration.data.splice(index, 0, row);\n            } else {\n                this._configuration.data.push(row);\n            }\n        });\n    }\n\n    public setData(data :  (any & {id:number|string})[]) : void {\n        this.clearData();\n        this._configuration.data.splice(0, this._configuration.data.length);\n        data.forEach((row : (any & {id:number|string})) => {\n            this._configuration.data.push(row);\n        });\n    }\n\n    public selectRange(start : number, end : number) : void {\n        let actStart = start;\n        let actEnd = end;\n        if(start > end){\n            actStart = end;\n            actEnd = start;\n        }\n\n        this._filters.splice(0, this._filters.length);\n        this.deselectAll();\n        for(let i = actStart; i <= actEnd; i++){\n            this._selectedRows.push(this._configuration.data[i]);\n        }\n    }\n\n}","<template>\n  <div data-testid=\"vrx-grid\" @keydown=\"keyboardListener($event)\" @click=\"mouseListener($event)\" class=\"table-outline relative overflow-x-auto h-full shadow-md w-full rounded-lg bg-white dark:bg-gray-800\" tabindex=\"1\">\n    <table class=\"w-full text-sm text-left text-gray-500 dark:text-gray-400\">\n      <VrxGridHeader v-model:grid-config=\"gridModel.configuration\"/>\n      <VrxGridBody v-model=\"gridModel.configuration\"/>\n    </table>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import VrxGridHeader from \"@/components/VrxGrid/VrxGridHeader.vue\";\n  import VrxGridBody from \"@/components/VrxGrid/VrxGridBody.vue\";\n  import {GridConfiguration, GridRow} from \"@/components/VrxGrid/GridConfiguration.ts\";\n  import {provide} from \"vue\";\n  import {Grid} from \"@/components/VrxGrid/Models/Grid.ts\";\n\n  const keyboardListener = (e: KeyboardEvent) => {\n    if((e.ctrlKey || e.metaKey) && e.key === 'a'){\n      e.preventDefault();\n      gridModel.selectAll();\n    }\n  }\n\n  const mouseListener = (e: MouseEvent) => {\n    if(e.shiftKey && gridModel.configuration.multiselect){\n      e.preventDefault();\n\n      const length = gridModel.selectedRows.length;\n      if(length >= 2){\n        let index0 = gridModel.data.find((row) => row.id === gridModel.selectedRows[0].id);\n        let index1 = gridModel.data.find((row) => row.id === gridModel.selectedRows[length-1].id);\n\n        index0 && index1 ? gridModel.selectRange(gridModel.data.indexOf(index0), gridModel.data.indexOf(index1)) : null;\n      }\n    }\n  }\n\n  const props = defineProps<{\n    gridConfiguration: GridConfiguration;\n  }>()\n\n  const gridModel = new Grid(props.gridConfiguration);\n\n  provide('filters', gridModel.filters);\n  provide('selectedRows', gridModel.selectedRows);\n\n  const getSelectedRows = () => {\n    return gridModel.selectedRows;\n  }\n\n  const getFilters = () => {\n    return gridModel.filters;\n  }\n\n  const setData = (data : GridRow[]) => {\n    gridModel.setData(data);\n  }\n\n  const updateData = (data : GridRow[]) => {\n    gridModel.updateData(data);\n  }\n\n  const resetFilters = () => {\n    gridModel.resetFilters();\n  }\n\n  const clearData = () => {\n    gridModel.clearData();\n  }\n\n  const deselectAll = () => {\n    gridModel.deselectAll();\n  }\n\n  const selectAll = () => {\n    gridModel.selectAll();\n  }\n\n  const selectRange = (start : number, end: number) => {\n    gridModel.selectRange(start, end);\n  }\n\n\n  defineExpose({ getSelectedRows, getFilters, setData, resetFilters, deselectAll, selectAll, clearData, updateData, selectRange });\n\n</script>\n\n<style scoped>\n  .table-outline:focus{\n    outline: none;\n  }\n</style>"],"names":["Header","header","__publicField","gridConfig","a","b","toExclude","h","data","d","v","filters","value","exist","f","inject","inputValue","ref","selectValue","headerModel","props","textStyle","Row","row","selectedRows","selectable","multiselect","headerConfig","id","included","rowIn","index","isFiltered","filter","customFilter","_a","cell","rowModel","computed","rowStyle","Grid","grid","reactive","r","start","end","actStart","actEnd","i","keyboardListener","e","gridModel","mouseListener","length","index0","index1","provide","__expose"],"mappings":"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"}