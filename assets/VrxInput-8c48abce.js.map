{"version":3,"file":"VrxInput-8c48abce.js","sources":["../../src/components/VrxInput/VrxInput.vue"],"sourcesContent":["<template>\n  <div data-testid=\"vrx-input\">\n    <label data-testid=\"vrx-input-label\" v-if=\"label\" class=\"block mb-2 text-sm font-medium\" :class=\"style.label\">\n      {{ label }}\n    </label>\n    <div class=\"relative\">\n      <div v-if=\"icon\" class=\"absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none\">\n        <VrxIcon :icon=\"icon\" :color=\"style.icon\" size=\"5\"/>\n      </div>\n      <input\n          data-testid=\"vrx-input-field\"\n          :type=\"showPassword ? 'text' : type\"\n          :placeholder=\"placeholder\"\n          :disabled=\"disabled\"\n          :value=\"modelValue\"\n          :readonly=\"readonly\"\n          @input=\"updateValue\"\n          class=\"vrx-input text-sm rounded-lg p-2.5 block w-full\"\n          :class=\"style.input\"\n      />\n      <div\n          v-if=\"type === 'password' && modelValue && modelValue.length > 0\"\n          class=\"absolute inset-y-0 right-0 flex items-center pr-3 cursor-pointer\"\n          @click=\"() => showPassword = !showPassword\"\n      >\n        <VrxIcon :icon=\"showPassword ? 'eye-hide' : 'eye'\" :color=\"style.icon\" size=\"5\" />\n      </div>\n    </div>\n    <p data-testid=\"vrx-input-helper\" v-if=\"helperText\" class=\"mt-2 text-sm\" :class=\"style.helperText\">\n      {{ helperText }}\n    </p>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n\nimport {computed, ref} from \"vue\";\nimport VrxIcon from \"@/components/VrxIcon/VrxIcon.vue\";\nimport { inputStyles } from \"@/components/styles.ts\";\nimport {IconLibraryType} from \"@/components/VrxIcon/IconLibrary.ts\";\n\nconst props = withDefaults(defineProps<{\n  label?: string,\n  placeholder?: string,\n  type: string,\n  disabled?: boolean,\n  modelValue: string,\n  helperText?: string,\n  invalid?: boolean,\n  icon?: IconLibraryType,\n  height?: number,\n  readonly?: boolean\n}>(),{\n  type: 'text',\n  placeholder: 'Insert Text'\n})\n\n\nconst showPassword = ref(false);\n\nconst emit = defineEmits(['update:modelValue'])\nconst updateValue = (event : any) => emit('update:modelValue', event.target.value)\n\nconst style = computed(() => {\n  return inputStyles(props.invalid || false, props.disabled || false, props.icon)\n})\n\n</script>\n\n<style scoped>\n  .vrx-input {\n    height: v-bind(props.height + 'px');\n  }\n\n</style>\n"],"names":["showPassword","ref","updateValue","event","emit","style","computed","inputStyles","props"],"mappings":"yvBA0DM,MAAAA,EAAeC,EAAI,EAAK,EAGxBC,EAAeC,GAAgBC,EAAK,oBAAqBD,EAAM,OAAO,KAAK,EAE3EE,EAAQC,EAAS,IACdC,EAAYC,EAAM,SAAW,GAAOA,EAAM,UAAY,GAAOA,EAAM,IAAI,CAC/E"}