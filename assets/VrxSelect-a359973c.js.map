{"version":3,"file":"VrxSelect-a359973c.js","sources":["../../src/components/VrxSelect/VrxSelect.vue"],"sourcesContent":["<template class=\"w-full\">\n  <div\n      data-testid=\"vrx-select\"\n      class=\"relative w-full\"\n      tabindex=\"0\"\n      @focusout=\"!disabled ? showDropdown = false : null\"\n      @focus=\"!disabled ? showDropdown = true : null\"\n  >\n    <label data-testid=\"vrx-select-label\" v-if=\"label\" class=\"block mb-2 text-sm font-medium\" :class=\"style.label\">\n      {{ label }}\n    </label>\n\n    <div\n        data-testid=\"vrx-select-button\"\n        class=\"button text-sm rounded-lg p-2.5 block w-full\"\n        :class=\"showDropdown ? style.select + ' ' + 'open-overlay' : style.select\"\n    >\n      <div class=\"button-left-side\">\n        <VrxIcon v-if=\"icon\" :icon=\"icon\" :color=\"style.icon\" size=\"5\"/>\n\n        <div class=\"selected-container\">\n          <div v-if=\"selectedList.length === 0\" :class=\"style.placeholder\">\n            {{ placeholder }}\n          </div>\n\n          <div v-else class=\"selected-container\">\n            <div :data-testid=\"'vrx-select-dropdown-selected-'+index\" v-if=\"multiselect\" v-for=\"(element, index) in selectedList\" :class=\"style.selected\" class=\"p-0.5 item-selected\">\n              <div>{{ element.label }}</div>\n              <VrxIcon icon=\"x\" size=\"4\" @click=\"itemClick(element)\"/>\n            </div>\n\n            <div v-if=\"!multiselect\">\n              {{ selectedList[0].label }}\n            </div>\n          </div>\n\n        </div>\n      </div>\n      <div class=\"button-right-side\">\n        <VrxIcon v-if=\"selectedList.length > 0\" :icon=\"'x'\" size=\"4\" :color=\"style.icon\" @click=\"deselectAll\"/>\n        <VrxIcon icon=\"chevron-down\" :class=\"showDropdown ? 'icon-active' : 'icon-off'\" size=\"5\" :color=\"style.icon\"/>\n      </div>\n    </div>\n\n    <div data-testid=\"vrx-select-dropdown\" v-if=\"showDropdown\" class=\"menu text-sm\" :class=\"style.dropdown\">\n      <div v-for=\"(element, index) in listData\" class=\"dropdown-item w-full\" :class=\"style.dropdownItem\">\n        <div :data-testid=\"'vrx-select-dropdown-' + index\" class=\"dropdown-item-content w-full h-full p-2.5\" @click=\"itemClick(element)\">\n          {{ element.label }}\n          <VrxIcon v-if=\"selectedList.includes(element)\" icon=\"check\" size=\"4\" :color=\"style.icon\"/>\n        </div>\n      </div>\n    </div>\n\n    <p data-testid=\"vrx-select-helper\" v-if=\"helperText\" class=\"mt-2 text-sm\" :class=\"style.helperText\">\n      {{ helperText }}\n    </p>\n  </div>\n\n</template>\n\n<script setup lang=\"ts\">\nimport {computed, ref} from \"vue\";\nimport VrxIcon from \"@/components/VrxIcon/VrxIcon.vue\";\nimport {selectStyles, ComponentVariant} from \"@/components/styles.ts\";\nimport {IconLibraryType} from \"@/components/VrxIcon/IconLibrary.ts\";\nimport {SelectItemInterface} from \"./SelectItemInterface.ts\";\n\n  const props = withDefaults(defineProps<{\n    label?: string,\n    placeholder?: string,\n    icon?: IconLibraryType,\n    disabled?: boolean,\n    invalid?: boolean,\n    helperText?: string,\n    listData: SelectItemInterface[],\n    modelValue: SelectItemInterface[],\n    variant?: ComponentVariant,\n    multiselect?: boolean,\n    height?: number,\n    onSelect?: (item: SelectItemInterface) => void\n    onClear?: () => void\n  }>(),{\n    disabled: false,\n    invalid: false,\n    multiselect: false,\n    label: '',\n    helperText: '',\n    placeholder: 'Select option',\n    variant: 'default'\n  })\n\n  const showDropdown = ref(false);\n  const selectedList = ref(props.modelValue as Array<SelectItemInterface>);\n\n  const emit = defineEmits(['update:modelValue'])\n\n  const style = computed(() => {\n    return selectStyles(props.disabled, props.invalid, props.variant);\n  })\n\n  const deselectAll = () => {\n    if(props.disabled) return;\n    selectedList.value = [];\n    emit('update:modelValue', selectedList.value);\n    props.onClear ? props.onClear() : null;\n  }\n\n  const itemClick = (item : SelectItemInterface) => {\n    if(props.disabled) return;\n    if(!props.multiselect){\n      selectedList.value = [item];\n    } else {\n      if(selectedList.value.includes(item)){\n        selectedList.value = selectedList.value.filter((element) => element !== item);\n      } else {\n        selectedList.value.push(item);\n      }\n    }\n    emit('update:modelValue', selectedList.value);\n\n\n    props.onSelect ? props.onSelect(item) : null;\n  }\n\n</script>\n\n<style scoped>\n  .button {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n    cursor: pointer;\n    z-index: 10;\n    height: v-bind(height + 'px');\n  }\n  .menu {\n    z-index: 200;\n    position: absolute;\n    width: 100%;\n    max-height: 300px;\n    border-top-width: 0;\n    border-radius: 0 0 8px 8px;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    justify-content: flex-start;\n    overflow-y: auto;\n  }\n  .open-overlay{\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n\n  .button-left-side {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    gap: 10px;\n    overflow: hidden;\n    padding-right: 10px;\n  }\n  .button-right-side{\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    gap: 5px;\n  }\n  .dropdown-item{\n    cursor: pointer;\n    user-select: none;\n  }\n  .item-selected{\n    padding-inline: 5px;\n    border-radius: 5px;\n    display: flex;\n    align-items: center;\n    gap: 5px;\n    user-select: none;\n  }\n  .selected-container{\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    gap: 5px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n  .dropdown-item-content{\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n  }\n</style>\n"],"names":["showDropdown","ref","selectedList","props","style","computed","selectStyles","deselectAll","emit","itemClick","item","element"],"mappings":"s3BA2FQ,MAAAA,EAAeC,EAAI,EAAK,EACxBC,EAAeD,EAAIE,EAAM,UAAwC,EAIjEC,EAAQC,EAAS,IACdC,EAAaH,EAAM,SAAUA,EAAM,QAASA,EAAM,OAAO,CACjE,EAEKI,EAAc,IAAM,CACrBJ,EAAM,WACTD,EAAa,MAAQ,GAChBM,EAAA,oBAAqBN,EAAa,KAAK,EACtCC,EAAA,SAAUA,EAAM,QAAA,EAAY,EAG9BM,EAAaC,GAA+B,CAC7CP,EAAM,WACLA,EAAM,YAGLD,EAAa,MAAM,SAASQ,CAAI,EACjCR,EAAa,MAAQA,EAAa,MAAM,OAAQS,GAAYA,IAAYD,CAAI,EAE/DR,EAAA,MAAM,KAAKQ,CAAI,EALjBR,EAAA,MAAQ,CAACQ,CAAI,EAQvBF,EAAA,oBAAqBN,EAAa,KAAK,EAG5CC,EAAM,UAAWA,EAAM,SAASO,CAAI,EAAI"}