{"version":3,"file":"VrxTree.stories-4b16e90f.js","sources":["../../src/components/VrxTree/TreeItem.vue","../../src/components/VrxTree/VrxTree.vue"],"sourcesContent":["<template>\n  <div data-testid=\"vrx-tree-node\" class=\"w-auto h-full flex flex-col\" :class=\"isParent ? null : 'pl-5'\">\n    <div class=\"tree-element hover:bg-gray-100 dark:hover:bg-gray-800 rounded-s\" @click=\"() => cellClicked(node, props.parentId)\">\n      <VrxIcon :icon=\"node.children.length > 0 ? 'chevron-right': 'empty'\" :class=\"open ? 'icon-rotate' : 'icon-off'\" size=\"5\" @click=\"clickHandle\" />\n      <VrxIcon v-if=\"node.icon\" :icon=\"node.icon\" size=\"4\"/>\n      <input\n          data-testid=\"vrx-tree-node-checkbox\"\n          v-if=\"selectable\"\n          type=\"checkbox\"\n          class=\"form-checkbox h-4 w-4 text-gray-600\"\n          v-model=\"checkValue\"\n          @click=\"selectHandle\"\n          :indeterminate.prop=\"hasChildrenChecked && !checkValue\"\n      />\n      <span :class=\"node.class\">{{ props.node.text }}</span>\n    </div>\n\n    <!-- CHILDREN RECURSIVE -->\n    <TreeItem\n        v-if=\"node.children.length > 0 && open\"\n        v-for=\"child in node.children\"\n        :node=\"child\"\n        :key=\"child.id\"\n        :selectable=\"selectable\"\n        :selected=\"checkValue\"\n        :selected-nodes=\"selectedNodes\"\n        :add-node=\"addNode\"\n        :remove-node=\"removeNode\"\n        :parent-id=\"props.node.id\"\n        :siblings=\"node.children\"\n        :remove-node-by-id=\"removeNodeById\"\n        @check-clicked=\"checkClicked\"\n        @cellClicked=\"(value, parentId) => cellClicked(value, parentId)\"\n    />\n\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import VrxIcon from \"@/components/VrxIcon/VrxIcon.vue\";\n  import {VrxTreeNode} from \"@/components/VrxTree/VrxTree.types.ts\";\n  import {Ref, ref, watch} from \"vue\";\n\n  const props = defineProps<{\n    node: VrxTreeNode,\n    selectable: boolean,\n    isParent?: boolean,\n    selected?: boolean,\n    selectedNodes: string[],\n    addNode: (nodeId: string) => void\n    removeNodeById: (nodeId: string, isParent?: boolean) => void\n    removeNode: (node: VrxTreeNode) => void\n    parentId: string,\n    siblings: VrxTreeNode[]\n  }>();\n\n  const open = ref(props.node.open);\n  const checkValue : Ref<boolean>= ref(props.selected || props.selectedNodes.includes(props.parentId));\n  const hasChildrenChecked = ref(false);\n\n  watch(() => props.selectedNodes,(newValue) => {\n    checkValue.value = newValue.includes(props.node.id) || newValue.includes(props.parentId) || props.selected;\n    hasChildrenChecked.value = newValue.filter((node : string) => node.includes(props.node.id)).length > 0;\n  },{immediate: true, deep: true});\n\n  watch(() => props.selected,(newValue) => {\n    checkValue.value = newValue || props.selectedNodes.includes(props.node.id);\n  },{immediate: true, deep: true});\n\n  /**\n   * Handle click for inputs and tree elements\n   * @param event\n   */\n  const clickHandle = (event: MouseEvent) => {\n    // @ts-ignore\n    if(event.target.nodeName !== \"INPUT\"){\n      open.value = !open.value;\n    }\n  }\n\n  const cellClicked = (value : VrxTreeNode, parentId : string) => {\n    emit('cellClicked', value, parentId);\n  }\n\n  /**\n   * Handle the click on the checkbox\n   */\n  const selectHandle = () => {\n    checkValue.value = !checkValue.value;\n    checkValue.value ? props.addNode(props.node.id) : props.removeNodeById(props.node.id, props.isParent);\n\n    if(props.node.children.length > 0){\n      props.node.children.forEach((child : VrxTreeNode) => {\n        props.removeNode(child);\n      })\n    }\n\n    if(!props.isParent){\n      checkParent();\n      checkSiblingsAndParent();\n      emit('checkClicked', props.node);\n    }\n  }\n\n\n  /**\n   * Check if all siblings are selected and if so, add the parent\n   */\n  const checkSiblingsAndParent = () => {\n    let all = true;\n    props.siblings.forEach((node : VrxTreeNode) => {\n      if(!props.selectedNodes.includes(node.id)){\n        all = false;\n      }\n    });\n    if(all){\n      props.siblings.forEach((node : VrxTreeNode) => {\n        props.removeNodeById(node.id);\n      })\n      props.addNode(props.parentId);\n    }\n  }\n\n  /**\n   * Check if parent is selected and if so, remove it and add all siblings\n   */\n  const checkParent = () => {\n    // If parent is actually selected, remove it from selected nodes and add all siblings\n    if(props.selectedNodes.includes(props.parentId) || props.selected){\n      props.removeNodeById(props.parentId, props.isParent);\n      props.siblings.forEach((sibling : VrxTreeNode) => {\n        if(sibling.id !== props.node.id)\n          props.addNode(sibling.id);\n      })\n    }\n  }\n\n  /**\n   * Emitted when a children checkbox is clicked\n   */\n  const checkClicked = () => {\n    if(props.isParent) return;\n    checkParent();\n    checkSiblingsAndParent();\n    emit('checkClicked', props.node);\n  }\n\n  const emit = defineEmits(['checkClicked', 'cellClicked']);\n\n</script>\n\n\n<style scoped>\n  .tree-element{\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    cursor: pointer;\n    gap: 5px;\n  }\n\n</style>\n","<template>\n  <div\n      class=\"flex flex-col gap-2.5 text-gray-900 dark:text-white\"\n      data-testid=\"vrx-tree\"\n  >\n    <VrxInput v-if=\"searchable\" model-value=\"test\" icon=\"search\"/>\n    <TreeItem\n        v-for=\"node in data\"\n        :parent-id=\"node.id\"\n        :node=\"node\"\n        :selectable=\"selectable ?? false\"\n        :is-parent=\"true\"\n        :key=\"node.id\"\n        :selected-nodes=\"selectedNodes as string[]\"\n        :add-node=\"addNode\"\n        :remove-node-by-id=\"removeNodeById\"\n        :remove-node=\"removeNode\"\n        :siblings=\"node.children\"\n        @cell-clicked=\"cellClicked\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import TreeItem from \"@/components/VrxTree/TreeItem.vue\";\n  import {VrxTreeNode} from \"@/components/VrxTree/VrxTree.types.ts\";\n  import VrxInput from \"@/components/VrxInput/VrxInput.vue\";\n  import {ref} from \"vue\";\n\n  const props = defineProps<{\n    data: VrxTreeNode[],\n    selectable?: boolean,\n    searchable?: boolean,\n    returnsUserData?: boolean\n  }>();\n\n  /**\n   * Assigns a unique id to each node so that operations can be performed on them\n   * @param tree\n   */\n  const buildTreeWithIds = (tree: VrxTreeNode[]) => {\n    const addChildrenIds = (node: VrxTreeNode, lastId: string) => {\n      node.children.forEach((child) => {\n        child.id = lastId + '-' + Math.random().toString(16).slice(2);\n        if(child.selected) selectedNodes.value.push(child.id);\n        addChildrenIds(child, child.id);\n      })\n    }\n\n    tree.forEach((node) => {\n      node.id = Math.random().toString(16).slice(2);\n      if(node.selected) selectedNodes.value.push(node.id);\n      addChildrenIds(node, node.id);\n    })\n  }\n\n  /**\n   * Removes the selected node based on the id\n   * @param nodeId\n   * @param isParent\n   */\n  const removeNodeById = (nodeId: string, isParent : boolean = false) => {\n      if(isParent) selectedNodes.value = [];\n      if(selectedNodes.value.includes(nodeId)){\n        selectedNodes.value.splice(selectedNodes.value.indexOf(nodeId), 1);\n      }\n  }\n\n  /**\n   * Removes the selected node and removes all the children of the node\n   * @param node\n   */\n  const removeNode = (node: VrxTreeNode) => {\n    removeNodeById(node.id);\n    removeSelectedChildren(node);\n  }\n\n  /**\n   * Checks if the parent node is selected and adds it to the selected nodes\n   * @param nodeId\n   */\n  const addNode = (nodeId: string) => {\n    if(!selectedNodes.value.includes(nodeId)){\n      selectedNodes.value.push(nodeId);\n    }\n  }\n\n  /**\n   * If parent is removed, remove all the children of the parent\n   * @param node\n   */\n  const removeSelectedChildren = (node: VrxTreeNode) => {\n    selectedNodes.value.forEach((item : any) => {\n      if(item.includes(node.id)){\n        selectedNodes.value.splice(selectedNodes.value.indexOf(item), 1);\n      }\n    })\n  }\n\n  /**\n   * Returns the node based on the text\n   * @param text\n   */\n  const getNodeByText = (text: string) => {\n    let result;\n    const findText = (node: VrxTreeNode) => {\n      if(node.text === text){\n        result = node;\n        return;\n      }\n      if(node.children.length > 0){\n        node.children.forEach((child) => {\n          findText(child);\n        })\n      }\n    }\n    findText(props.data[0]);\n    return result;\n  }\n\n  /**\n   * Returns the selected nodes\n   */\n  const getSelectedNodes = () => {\n    const result : VrxTreeNode[] = [];\n\n    const traverse = (node: VrxTreeNode) => {\n      if(selectedNodes.value.includes(node.id)){\n        result.push(node);\n      }\n\n      if(node.children.length > 0){\n        node.children.forEach((child) => {\n          traverse(child);\n        })\n      }\n    }\n\n    traverse(props.data[0]);\n    const flatMapResult = result.flatMap(node => flattenTree(node));\n    return props.returnsUserData ? flatMapResult.map(node => node.userData ?? node) : flatMapResult;\n  }\n\n  /**\n   * Flattens the tree structure so that can be used as a list\n   * @param node\n   */\n  const flattenTree = (node: VrxTreeNode) => {\n    const result : VrxTreeNode [] = [];\n    const flat = (node: VrxTreeNode) => {\n      result.push(node);\n      node.children.forEach((child) => {\n        flat(child);\n      })\n    }\n    flat(node);\n    return result;\n  }\n\n  const cellClicked = (node: VrxTreeNode, parentId: string) => {\n    emit('cellClicked', node, parentId)\n  }\n\n  const selectedNodes = ref<String []>([]);\n  const emit = defineEmits(['cellClicked']);\n  buildTreeWithIds(props.data);\n\n  defineExpose({ getSelectedNodes, getNodeByText, removeNodeById, addNode, removeNode, flattenTree });\n\n</script>\n\n<style scoped>\n\n</style>\n"],"names":["open","ref","props","checkValue","hasChildrenChecked","watch","newValue","node","clickHandle","event","cellClicked","value","parentId","emit","selectHandle","child","checkParent","checkSiblingsAndParent","all","sibling","checkClicked","buildTreeWithIds","tree","addChildrenIds","lastId","selectedNodes","removeNodeById","nodeId","isParent","removeNode","removeSelectedChildren","addNode","item","getNodeByText","text","result","findText","getSelectedNodes","traverse","flatMapResult","flattenTree","flat","__expose"],"mappings":"skCAwDQA,EAAOC,EAAIC,EAAM,KAAK,IAAI,EAC1BC,EAA2BF,EAAIC,EAAM,UAAYA,EAAM,cAAc,SAASA,EAAM,QAAQ,CAAC,EAC7FE,EAAqBH,EAAI,EAAK,EAEpCI,EAAM,IAAMH,EAAM,cAAeI,GAAa,CAC5CH,EAAW,MAAQG,EAAS,SAASJ,EAAM,KAAK,EAAE,GAAKI,EAAS,SAASJ,EAAM,QAAQ,GAAKA,EAAM,SAClGE,EAAmB,MAAQE,EAAS,OAAQC,GAAkBA,EAAK,SAASL,EAAM,KAAK,EAAE,CAAC,EAAE,OAAS,GACrG,CAAC,UAAW,GAAM,KAAM,EAAK,CAAA,EAE/BG,EAAM,IAAMH,EAAM,SAAUI,GAAa,CACvCH,EAAW,MAAQG,GAAYJ,EAAM,cAAc,SAASA,EAAM,KAAK,EAAE,GACzE,CAAC,UAAW,GAAM,KAAM,EAAK,CAAA,EAMzB,MAAAM,EAAeC,GAAsB,CAEtCA,EAAM,OAAO,WAAa,UACtBT,EAAA,MAAQ,CAACA,EAAK,MACrB,EAGIU,EAAc,CAACC,EAAqBC,IAAsB,CACzDC,EAAA,cAAeF,EAAOC,CAAQ,CAAA,EAM/BE,EAAe,IAAM,CACdX,EAAA,MAAQ,CAACA,EAAW,MAC/BA,EAAW,MAAQD,EAAM,QAAQA,EAAM,KAAK,EAAE,EAAIA,EAAM,eAAeA,EAAM,KAAK,GAAIA,EAAM,QAAQ,EAEjGA,EAAM,KAAK,SAAS,OAAS,GAC9BA,EAAM,KAAK,SAAS,QAASa,GAAwB,CACnDb,EAAM,WAAWa,CAAK,CAAA,CACvB,EAGCb,EAAM,WACIc,IACWC,IAClBJ,EAAA,eAAgBX,EAAM,IAAI,EACjC,EAOIe,EAAyB,IAAM,CACnC,IAAIC,EAAM,GACJhB,EAAA,SAAS,QAASK,GAAuB,CACzCL,EAAM,cAAc,SAASK,EAAK,EAAE,IAChCW,EAAA,GACR,CACD,EACEA,IACKhB,EAAA,SAAS,QAASK,GAAuB,CACvCL,EAAA,eAAeK,EAAK,EAAE,CAAA,CAC7B,EACKL,EAAA,QAAQA,EAAM,QAAQ,EAC9B,EAMIc,EAAc,IAAM,EAErBd,EAAM,cAAc,SAASA,EAAM,QAAQ,GAAKA,EAAM,YACvDA,EAAM,eAAeA,EAAM,SAAUA,EAAM,QAAQ,EAC7CA,EAAA,SAAS,QAASiB,GAA0B,CAC7CA,EAAQ,KAAOjB,EAAM,KAAK,IACrBA,EAAA,QAAQiB,EAAQ,EAAE,CAAA,CAC3B,EACH,EAMIC,EAAe,IAAM,CACtBlB,EAAM,WACGc,IACWC,IAClBJ,EAAA,eAAgBX,EAAM,IAAI,EAAA,0nDCxG3BmB,EAAoBC,GAAwB,CAC1C,MAAAC,EAAiB,CAAChB,EAAmBiB,IAAmB,CACvDjB,EAAA,SAAS,QAASQ,GAAU,CACzBA,EAAA,GAAKS,EAAS,IAAM,KAAK,SAAS,SAAS,EAAE,EAAE,MAAM,CAAC,EACzDT,EAAM,UAAwBU,EAAA,MAAM,KAAKV,EAAM,EAAE,EACrCQ,EAAAR,EAAOA,EAAM,EAAE,CAAA,CAC/B,CAAA,EAGEO,EAAA,QAASf,GAAS,CAChBA,EAAA,GAAK,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,MAAM,CAAC,EACzCA,EAAK,UAAwBkB,EAAA,MAAM,KAAKlB,EAAK,EAAE,EACnCgB,EAAAhB,EAAMA,EAAK,EAAE,CAAA,CAC7B,CAAA,EAQGmB,EAAiB,CAACC,EAAgBC,EAAqB,KAAU,CAChEA,IAAUH,EAAc,MAAQ,IAChCA,EAAc,MAAM,SAASE,CAAM,GACpCF,EAAc,MAAM,OAAOA,EAAc,MAAM,QAAQE,CAAM,EAAG,CAAC,CACnE,EAOEE,EAActB,GAAsB,CACxCmB,EAAenB,EAAK,EAAE,EACtBuB,EAAuBvB,CAAI,CAAA,EAOvBwB,EAAWJ,GAAmB,CAC9BF,EAAc,MAAM,SAASE,CAAM,GACvBF,EAAA,MAAM,KAAKE,CAAM,CACjC,EAOIG,EAA0BvB,GAAsB,CACtCkB,EAAA,MAAM,QAASO,GAAe,CACvCA,EAAK,SAASzB,EAAK,EAAE,GACtBkB,EAAc,MAAM,OAAOA,EAAc,MAAM,QAAQO,CAAI,EAAG,CAAC,CACjE,CACD,CAAA,EAOGC,EAAiBC,GAAiB,CAClC,IAAAC,EACE,MAAAC,EAAY7B,GAAsB,CACnC,GAAAA,EAAK,OAAS2B,EAAK,CACXC,EAAA5B,EACT,MACF,CACGA,EAAK,SAAS,OAAS,GACnBA,EAAA,SAAS,QAASQ,GAAU,CAC/BqB,EAASrB,CAAK,CAAA,CACf,CACH,EAEO,OAAAqB,EAAAlC,EAAM,KAAK,CAAC,CAAC,EACfiC,CAAA,EAMHE,EAAmB,IAAM,CAC7B,MAAMF,EAAyB,CAAA,EAEzBG,EAAY/B,GAAsB,CACnCkB,EAAc,MAAM,SAASlB,EAAK,EAAE,GACrC4B,EAAO,KAAK5B,CAAI,EAGfA,EAAK,SAAS,OAAS,GACnBA,EAAA,SAAS,QAASQ,GAAU,CAC/BuB,EAASvB,CAAK,CAAA,CACf,CACH,EAGOuB,EAAApC,EAAM,KAAK,CAAC,CAAC,EACtB,MAAMqC,EAAgBJ,EAAO,QAAgB5B,GAAAiC,EAAYjC,CAAI,CAAC,EACvD,OAAAL,EAAM,gBAAkBqC,EAAc,OAAYhC,EAAK,UAAYA,CAAI,EAAIgC,CAAA,EAO9EC,EAAejC,GAAsB,CACzC,MAAM4B,EAA0B,CAAA,EAC1BM,EAAQlC,GAAsB,CAClC4B,EAAO,KAAK5B,CAAI,EAChBA,EAAK,SAAS,QAASQ,GAAU,CAC/B0B,EAAK1B,CAAK,CAAA,CACX,CAAA,EAEH,OAAA0B,EAAKlC,CAAI,EACF4B,CAAA,EAGHzB,EAAc,CAACH,EAAmBK,IAAqB,CACtDC,EAAA,cAAeN,EAAMK,CAAQ,CAAA,EAG9Ba,EAAgBxB,EAAe,CAAA,CAAE,EAEvC,OAAAoB,EAAiBnB,EAAM,IAAI,EAE3BwC,EAAa,CAAE,iBAAAL,EAAkB,cAAAJ,EAAe,eAAAP,EAAgB,QAAAK,EAAS,WAAAF,EAAY,YAAAW,EAAa;;;;;;;;;;;;;;;;;;;;;;;"}